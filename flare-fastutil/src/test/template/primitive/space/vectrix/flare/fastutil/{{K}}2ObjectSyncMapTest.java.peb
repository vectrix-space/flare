package space.vectrix.flare;

import com.google.common.collect.Lists;
import it.unimi.dsi.fastutil.{{ G }}.{{ K }}Set;
import it.unimi.dsi.fastutil.{{ G }}.{{ K }}2ObjectMap;
import net.jodah.concurrentunit.Waiter;
import org.checkerframework.checker.nullness.qual.NonNull;
import org.junit.jupiter.api.Test;
import space.vectrix.flare.fastutil.{{ K }}2ObjectSyncMap;
import space.vectrix.test.TestHelper;

import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class {{ K }}2ObjectSyncMapTest extends {{ K }}2ObjectAbstractMapTest<String> {
  @Override
  protected @NonNull {{ K }}2ObjectMap<String> createMap() {
    return {{ K }}2ObjectSyncMap.hashmap();
  }

  @Override
  protected @NonNull {{ K }}2ObjectMap<String> populate(final @NonNull {{ K }}2ObjectMap<String> map, final int entries) {
    for(int i = 0; i < entries; i++) {
      map.put(this.key(i), this.value(i));
    }
    return map;
  }

  @Override
  protected {{ K }}2ObjectMap.@NonNull Entry<String> entry(final int index) {
    return this.exampleEntry({{ KT }}.valueOf(String.valueOf(index)), String.valueOf(index));
  }

  @Override
  protected {{ k }} key(final int index) {
    return {{ KT }}.valueOf(String.valueOf(index));
  }

  @Override
  protected String value(final int index) {
    return String.valueOf(index);
  }

  // Put

  @Test
  public void testPutNullValue() {
    final {{ K }}2ObjectMap<String> map = this.createMap();
    assertThrows(NullPointerException.class, () -> map.put(this.key(0), null));
  }

  @Test
  public void testPutRead() {
    final {{ K }}2ObjectMap<String> map = this.populate(this.createMap(), 3);
    assertEquals(this.value(0), map.put(this.key(0), this.value(3)), "Map should return the value at index 0, when putting a value for the key at index 0.");
    for(int i = 0; i < 10; i++) { // Read multiple times in order to promote dirty to read map.
      assertEquals(this.value(3), map.get(this.key(0)), "Map should return the value at index 3, when retrieving the key at index 0.");
    }
    assertEquals(this.value(3), map.put(this.key(0), this.value(2)), "Map should return the value at index 3, when putting a value for the key at index 0.");
    assertEquals(this.value(2), map.get(this.key(0)), "Map should return the value at index 2, when retrieving the key at index 0.");
    assertNull(map.put(this.key(3), this.value(3)), "Map should return null when putting a new entry.");
    assertEquals(this.value(3), map.get(this.key(3)), "Map should return the value at index 3, when retrieving the key at index 3.");
  }

  // Put If Absent

  @Test
  public void testPutIfAbsentNullValue() {
    final {{ K }}2ObjectMap<String> map = this.createMap();
    assertThrows(NullPointerException.class, () -> map.putIfAbsent(this.key(0), null));
  }

  @Test
  public void testPutIfAbsentRead() {
    final {{ K }}2ObjectMap<String> map = this.createMap();
    assertNull(map.putIfAbsent(this.key(0), this.value(0)), "Map should return null when no previous value is present for the key at index 0.");
    for(int i = 0; i < 10; i++) { // Read multiple times in order to promote dirty to read map.
      assertEquals(this.value(0), map.get(this.key(0)), "Map should return the value at index 0 when no mutation of the key at index 0 should have occurred.");
    }
    assertEquals(this.value(0), map.putIfAbsent(this.key(0), this.value(2)), "Map should return the value at index 0, when attempting to put the key at index 0.");
    assertEquals(this.value(0), map.get(this.key(0)), "Map should return the value at index 0 when no mutation of the key at index 0 should have occurred.");
  }

  // Compute If Absent

  @Test
  public void testComputeIfAbsentNullFunction() {
    final {{ K }}2ObjectMap<String> map = this.createMap();
    assertThrows(NullPointerException.class, () -> map.computeIfAbsent(this.key(0), null));
  }

  // Compute If Present

  @Test
  public void testComputeIfPresentNullFunction() {
    final {{ K }}2ObjectMap<String> map = this.createMap();
    assertThrows(NullPointerException.class, () -> map.computeIfPresent(this.key(0), null));
  }

  // Compute

  @Test
  public void testComputeNullFunction() {
    final {{ K }}2ObjectMap<String> map = this.createMap();
    assertThrows(NullPointerException.class, () -> map.compute(this.key(0), null));
  }

  // Replace

  @Test
  public void testReplaceNullValue() {
    final {{ K }}2ObjectMap<String> map = this.createMap();
    assertThrows(NullPointerException.class, () -> map.replace(this.key(0), null));
  }

  @Test
  public void testReplaceRead() {
    final {{ K }}2ObjectMap<String> map = this.populate(this.createMap(), 3);
    for(int i = 0; i < 10; i++) { // Read multiple times in order to promote dirty to read map.
      assertEquals(this.value(0), map.get(this.key(0)), "Map should return the value at index 0 when no mutation of the key at index 0 should have occurred.");
    }
    assertEquals(this.value(0), map.replace(this.key(0), this.value(3)), "Map should return the previous value associated with the key at index 0.");
    assertEquals(this.value(3), map.get(this.key(0)), "Map should return the new value associated with the key at index 0.");
  }

  // Replace Entry

  @Test
  public void testReplaceEntryNullValue1() {
    final {{ K }}2ObjectMap<String> map = this.createMap();
    assertThrows(NullPointerException.class, () -> map.replace(this.key(0), null, this.value(0)));
  }

  @Test
  public void testReplaceEntryNullValue2() {
    final {{ K }}2ObjectMap<String> map = this.createMap();
    assertThrows(NullPointerException.class, () -> map.replace(this.key(0), this.value(0), null));
  }

  @Test
  public void testReplaceEntryRead() {
    final {{ K }}2ObjectMap<String> map = this.populate(this.createMap(), 3);
    for(int i = 0; i < 10; i++) { // Read multiple times in order to promote dirty to read map.
      assertEquals(this.value(0), map.get(this.key(0)), "Map should return the value at index 0 when no mutation of the key at index 0 should have occurred.");
    }
    assertFalse(map.replace(this.key(0), this.value(1), this.value(2)), "Map should not be able to replace the key at index 0, with the old value not matching the actual stored value.");
    assertTrue(map.replace(this.key(0), this.value(0), this.value(2)), "Map should be able to replace the key at index 0, with the old value matching the actual stored value.");
    assertEquals(this.value(2), map.get(this.key(0)), "Map should return the new value associated with the key at index 0.");
  }

  // For Each

  @Test
  public void testForEach() {
    final {{ K }}2ObjectMap<String> map = this.populate(this.createMap(), 5);
    final AtomicInteger counter = new AtomicInteger();
    map.forEach((key, value) -> {
      counter.getAndIncrement();
    });
    assertTrue(counter.get() == 5, "Map should have iterated 5 times.");
  }

  // Put All

  @Test
  public void testPutAll() {
    final {{ K }}2ObjectMap<String> first = this.populate(this.createMap(), 0);
    final {{ K }}2ObjectMap<String> other = this.populate(this.createMap(), 5);
    first.putAll(other);
    for(int i = 0; i < 5; i++) {
      final String original = String.valueOf(i);
      assertEquals(original, first.get(this.key(i)), "Map should return the value at index " + i + ".");
    }
  }

  // Replace All

  @Test
  public void testReplaceAll() {
    final {{ K }}2ObjectMap<String> map = this.populate(this.createMap(), 5);
    map.replaceAll((key, value) -> String.valueOf(Integer.valueOf(value) + 10));
    for(int i = 0; i < 5; i++) {
      final {{ k }} originalKey = {{ KT }}.valueOf(String.valueOf(i));
      final String offsetValue = String.valueOf(i + 10);
      assertEquals(offsetValue, map.get(originalKey), "Map should return the value " + offsetValue + " for key " + originalKey + ".");
    }
  }

  // Entry Set

  @Test
  public void testEntriesAdd() {
    final {{ K }}2ObjectMap<String> map = this.populate(this.createMap(), 3);
    final Set<{{ K }}2ObjectMap.Entry<String>> keys = map.{{ k }}2ObjectEntrySet();
    assertFalse(keys.add(this.entry(0)), "Map should return false for attempting to store the entry at index 0.");
    assertTrue(keys.add(this.entry(3)), "Map should return true for storing the entry at index 3.");
    assertTrue(keys.contains(this.entry(3)), "Map should return true for containing the entry at index 3.");
  }

  @Test
  public void testEntriesAddAll() {
    final {{ K }}2ObjectMap<String> first = this.populate(this.createMap(), 0);
    final {{ K }}2ObjectMap<String> other = this.populate(this.createMap(), 5);
    final Set<{{ K }}2ObjectMap.Entry<String>> keys = first.{{ k }}2ObjectEntrySet();
    keys.addAll(other.{{ k }}2ObjectEntrySet());
    for(int i = 0; i < 5; i++) {
      final String original = String.valueOf(i);
      assertEquals(original, first.get(this.key(i)), "Map should return the value at index " + i + ".");
    }
  }

  // Key Set

  @Test
  public void testKeysAddUnsupported() {
    final {{ K }}2ObjectMap<String> map = this.populate(this.createMap(), 3);
    final {{ K }}Set keys = map.keySet();
    assertThrows(UnsupportedOperationException.class, () -> keys.add(this.key(0)));
  }

  @Test
  public void testKeysAddAllUnsupported() {
    final {{ K }}2ObjectMap<String> map = this.populate(this.createMap(), 3);
    final {{ K }}Set keys = map.keySet();
    assertThrows(UnsupportedOperationException.class, () -> keys.addAll(Lists.newArrayList(this.key(0), this.key(1))));
  }

  // Value Collection

  @Test
  public void testValuesAddUnsupported() {
    final {{ K }}2ObjectMap<String> map = this.populate(this.createMap(), 3);
    final Collection<String> values = map.values();
    assertThrows(UnsupportedOperationException.class, () -> values.add(this.value(0)));
  }

  @Test
  public void testValuesAddAllUnsupported() {
    final {{ K }}2ObjectMap<String> map = this.populate(this.createMap(), 3);
    final Collection<String> values = map.values();
    assertThrows(UnsupportedOperationException.class, () -> values.addAll(Lists.newArrayList(this.value(0), this.value(1))));
  }

  // Expunging

  @Test
  public void testExpungeRead() {
    final {{ K }}2ObjectMap<String> map = this.populate(this.createMap(), 3);
    final int initialSize = map.size();
    for(int i = 0; i < 10; i++) { // Read multiple times in order to promote dirty to read map.
      assertEquals(this.value(0), map.get(this.key(0)), "Map should return the value at index 0, when retrieving the key at index 0.");
    }
    assertEquals(this.value(0), map.remove(this.key(0)), "Map should return the value at index 0, when removing the entry for the key at index 0.");
    assertEquals(initialSize - 1, map.size(), "Map should return a size with 1 less when removing an entry.");
    assertNull(map.get(this.key(0)), "Map should return null when removing the entry.");
    assertNull(map.remove(this.key(0)), "Map should return null when removing the entry at index 0 with no value present.");
    for(int i = 0; i < 10; i++) { // Read multiple times in order to promote dirty to read map.
      assertEquals(this.value(2), map.get(this.key(2)), "Map should return the value at index 2, when retrieving the key at index 2.");
    }
    assertNull(map.get(this.key(0)), "Map should return null after the entry is removed.");
  }

  @Test
  public void testUnexpungeRead() {
    final {{ K }}2ObjectMap<String> map = this.populate(this.createMap(), 3);
    final int initialSize = map.size();
    for(int i = 0; i < 10; i++) { // Read multiple times in order to promote dirty to read map.
      assertEquals(this.value(0), map.get(this.key(0)), "Map should return the value at index 0, when retrieving the key at index 0.");
    }
    assertEquals(this.value(0), map.remove(this.key(0)), "Map should return the value at index 0, when removing the entry for the key at index 0.");
    assertEquals(initialSize - 1, map.size(), "Map should return a size with 1 less when removing an entry.");
    assertNull(map.get(this.key(0)), "Map should return null when removing the entry.");
    assertNull(map.remove(this.key(0)), "Map should return null when removing the entry at index 0 with no value present.");
    assertNull(map.put(this.key(0), this.value(0)), "Map should return null when putting the entry into the map.");
    assertEquals(this.value(0), map.get(this.key(0)), "Map should return the value at index 0 for the key at index 0.");
    for(int i = 0; i < 10; i++) { // Read multiple times in order to promote dirty to read map.
      assertEquals(this.value(2), map.get(this.key(2)), "Map should return the value at index 2, when retrieving the key at index 2.");
    }
    assertEquals(this.value(0), map.get(this.key(0)), "Map should return the value at index 0 for the key at index 0.");
  }

  // Concurrent

  @Test
  public void testConcurrentPutRemove() throws Throwable {
    final {{ K }}2ObjectMap<Boolean> map = {{ K }}2ObjectSyncMap.hashmap();
    final Waiter waiter = new Waiter();
    final AtomicInteger counter = new AtomicInteger();

    final int threadCount = 50;
    TestHelper.threadedRun(threadCount, () -> {
      try {
        final Random shouldPut = new Random();
        for(int i = 0; i < 1_000_000; i++) {
          {{ k }} value = {{ KT }}.valueOf(String.valueOf(counter.get()));
          if(shouldPut.nextBoolean()) {
            map.put(value, Boolean.TRUE);
          } else {
            map.remove(value);
          }
        }
      } catch (final Exception exception) {
        waiter.fail(exception);
      }

      waiter.resume();
    });

    waiter.await(100_000, threadCount);
  }

  // Utility

  private {{ K }}2ObjectMap.Entry<String> exampleEntry(final {{ k }} key, final String value) {
    return new {{ K }}2ObjectMap.Entry<String>() {
      @Override
      public {{ k }} get{{ K }}Key() {
        return key;
      }

      @Override
      public String getValue() {
        return value;
      }

      @Override
      public String setValue(String value) {
        return value;
      }

      @Override
      public String toString() {
        return "{{ K }}2ObjectSyncMapImpl.MapEntry{key=" + this.get{{ K }}Key() + ", value=" + this.getValue() + "}";
      }

      @Override
      public boolean equals(final Object other) {
        if(this == other) return true;
        if(!(other instanceof Map.Entry)) return false;
        final Map.Entry<?, ?> that = (Map.Entry<?, ?>) other;
        return Objects.equals(this.get{{ K }}Key(), that.getKey())
          && Objects.equals(this.getValue(), that.getValue());
      }

      @Override
      public int hashCode() {
        return Objects.hash(this.get{{ K }}Key(), this.getValue());
      }
    };
  }
}
