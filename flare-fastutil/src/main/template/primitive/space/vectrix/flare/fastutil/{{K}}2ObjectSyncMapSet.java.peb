package space.vectrix.flare.fastutil;

import it.unimi.dsi.fastutil.{{ G }}.Abstract{{ K }}Set;
import it.unimi.dsi.fastutil.{{ G }}.{{ K }}Iterator;
import it.unimi.dsi.fastutil.{{ G }}.{{ K }}Set;
import it.unimi.dsi.fastutil.{{ G }}.{{ K }}Spliterator;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/* package */ final class {{ K }}2ObjectSyncMapSet extends Abstract{{ K }}Set {
  private static final long serialVersionUID = 1;
  private final {{ K }}2ObjectSyncMap<Boolean> map;

  /* package */ {{ K }}2ObjectSyncMapSet(final @NotNull {{ K }}2ObjectSyncMap<Boolean> map) {
    this.map = map;
  }

  @Override
  public void clear() {
    this.map.clear();
  }

  @Override
  public int size() {
    return this.map.size();
  }

  @Override
  public boolean isEmpty() {
    return this.map.isEmpty();
  }

  @Override
  public boolean contains(final {{ k }} key) {
    return this.map.containsKey(key);
  }

  @Override
  public boolean add(final {{ k }} key) {
    return this.map.put(key, Boolean.TRUE) == null;
  }

  @Override
  public boolean remove(final {{ k }} key) {
    return this.map.remove(key) != null;
  }

  @Override
  public @NotNull {{ K }}Iterator iterator() {
    return this.backingSet().iterator();
  }

  @Override
  public @NotNull {{ K }}Spliterator spliterator() {
    return this.backingSet().spliterator();
  }

  @Override
  public {{ k }}[] toArray(final {{ k }}[] original) {
    return this.backingSet().toArray(original);
  }

  @Override
  public {{ k }}[] to{{ K }}Array() {
    return this.backingSet().to{{ K }}Array();
  }

  @Override
  public boolean equals(final @Nullable Object other) {
    if(other == this) return true;
    if(!(other instanceof {{ K }}Set)) return false;
    return this.backingSet().equals(other);
  }

  @Override
  public int hashCode() {
    return this.backingSet().hashCode();
  }

  @Override
  public @NotNull String toString() {
    return this.backingSet().toString();
  }

  private @NotNull {{ K }}Set backingSet() {
    return this.map.keySet();
  }
}
