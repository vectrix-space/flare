package space.vectrix.flare.fastutil;

import static java.util.Objects.requireNonNull;

import it.unimi.dsi.fastutil.{{ G }}.Abstract{{ K }}2ObjectMap;
import it.unimi.dsi.fastutil.{{ G }}.{{ K }}2ObjectMap;
import it.unimi.dsi.fastutil.{{ G }}.{{ K }}2ObjectMaps;
import it.unimi.dsi.fastutil.objects.AbstractObjectSet;
import it.unimi.dsi.fastutil.objects.ObjectIterator;
import it.unimi.dsi.fastutil.objects.ObjectSet;
import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;

import java.util.AbstractMap;
import java.util.Iterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.function.Consumer;
import java.util.function.IntFunction;

/* package */ final class {{ K }}2ObjectSyncMapImpl<V> extends Abstract{{ K }}2ObjectMap<V> implements {{ K }}2ObjectSyncMap<V> {
  private static final long serialVersionUID = 1;
  private final Object lock = new Object();
  private final IntFunction<{{ K }}2ObjectMap<ExpungingValue<V>>> function;
  private volatile {{ K }}2ObjectMap<ExpungingValue<V>> read;
  private volatile boolean readAmended;
  private int readMisses;
  private {{ K }}2ObjectMap<ExpungingValue<V>> dirty;
  private EntrySet entrySet;

  /* package */ {{ K }}2ObjectSyncMapImpl(final @NonNull IntFunction<{{ K }}2ObjectMap<ExpungingValue<V>>> function, final int initialCapacity) {
    this.function = function;
    this.read = function.apply(initialCapacity);
  }

  @Override
  public int size() {
    this.promoteIfNeeded();
    int size = 0;
    for(final ExpungingValue<V> value : this.read.values()) {
      if(value.exists()) size++;
    }
    return size;
  }

  @Override
  public boolean containsKey(final {{ k }} key) {
    ExpungingValue<V> entry = this.read.get(key);
    if(entry == null && this.readAmended) {
      synchronized(this.lock) {
        if((entry = this.read.get(key)) == null && this.readAmended && this.dirty != null) {
          entry = this.dirty.get(key);
          // The slow path should be avoided, even if the value does
          // not match or is present. So we mark a miss, to eventually
          // promote and take a faster path.
          this.missLocked();
        }
      }
    }
    return entry != null && entry.exists();
  }

  @Override
  public boolean containsValue(final @Nullable Object value) {
    final ObjectIterator<{{ K }}2ObjectMap.Entry<V>> iterator = this.{{ k }}2ObjectEntrySet().iterator();
    while(iterator.hasNext()) {
      if(Objects.equals(((Map.Entry<?, ?>) iterator.next()).getValue(), value)) return true;
    }
    return false;
  }

  @Override
  public V get(final {{ k }} key) {
    ExpungingValue<V> entry = this.read.get(key);
    if(entry == null && this.readAmended) {
      synchronized(this.lock) {
        if((entry = this.read.get(key)) == null && this.readAmended && this.dirty != null) {
          entry = this.dirty.get(key);
          // The slow path should be avoided, even if the value does
          // not match or is present. So we mark a miss, to eventually
          // promote and take a faster path.
          this.missLocked();
        }
      }
    }
    return entry != null ? entry.get() : null;
  }

  @Override
  public V put(final {{ k }} key, final @NonNull V value) {
    requireNonNull(value, "value");
    final ExpungingValue<V> entry = this.read.get(key);
    final V previous = entry != null ? entry.get() : null;
    if(entry != null && entry.trySet(value)) return previous;
    return this.putDirty(key, value, false);
  }

  private V putDirty(final {{ k }} key, final @NonNull V value, final boolean present) {
    ExpungingValue<V> entry;
    V previous = null;
    synchronized(this.lock) {
      if((entry = this.read.get(key)) != null) {
        previous = entry.get();
        if(entry.tryUnexpungeAndSet(value)) {
          this.dirty.put(key, entry);
        } else {
          entry.set(value);
        }
      } else {
        entry = this.dirty != null ? this.dirty.get(key) : null;
        if(entry != null) {
          previous = entry.get();
          entry.set(value);
          this.missLocked();
        } else if(!present) {
          if(!this.readAmended) {
            this.dirtyLocked();
            this.readAmended = true;
          }
          if(this.dirty != null) {
            entry = this.dirty.put(key, new ExpungingValueImpl<>(value));
            if(entry != null) {
              previous = entry.get();
            }
          }
        }
      }
    }
    return previous;
  }

  @Override
  @SuppressWarnings("SuspiciousMethodCalls")
  public V remove(final {{ k }} key) {
    ExpungingValue<V> entry = this.read.get(key);
    if(entry == null && this.readAmended) {
      synchronized(this.lock) {
        if((entry = this.read.get(key)) == null && this.readAmended && this.dirty != null) {
          entry = this.dirty.remove(key);
          // The slow path should be avoided, even if the value does
          // not match or is present. So we mark a miss, to eventually
          // promote and take a faster path.
          this.missLocked();
        }
      }
    }
    return entry != null ? entry.clear() : null;
  }

  @Override
  @SuppressWarnings("SuspiciousMethodCalls")
  public boolean remove(final {{ k }} key, final @NonNull Object value) {
    requireNonNull(value, "value");
    ExpungingValue<V> entry = this.read.get(key);
    if(entry == null && this.readAmended) {
      synchronized(this.lock) {
        if((entry = this.read.get(key)) == null && this.readAmended && this.dirty != null) {
          if((entry = this.dirty.get(key)) != null && entry.replace(value, null)) {
            entry = this.dirty.remove(key);
          } else {
            entry = null;
          }
          // The slow path should be avoided, even if the value does
          // not match or is present. So we mark a miss, to eventually
          // promote and take a faster path.
          this.missLocked();
          return entry != null;
        }
      }
    }
    return entry != null && entry.replace(value, null);
  }

  @Override
  public V putIfAbsent(final {{ k }} key, final @NonNull V value) {
    requireNonNull(value, "value");
    ExpungingValue<V> entry = this.read.get(key);
    Map.Entry<Boolean, V> result = null;
    if(entry != null) {
      result = entry.putIfAbsent(value);
      if(result.getKey() == Boolean.TRUE) {
        return result.getValue();
      }
    }
    synchronized(this.lock) {
      if((entry = this.read.get(key)) != null) {
        if(entry.tryUnexpungeAndSet(value)) {
          this.dirty.put(key, entry);
        }
      } else {
        entry = this.dirty != null ? this.dirty.get(key) : null;
        if(entry != null) {
          result = entry.putIfAbsent(value);
          this.missLocked();
        } else {
          if(!this.readAmended) {
            this.dirtyLocked();
            this.readAmended = true;
          }
          if(this.dirty != null) {
            this.dirty.put(key, new ExpungingValueImpl<>(value));
          }
        }
      }
    }
    return result != null ? result.getValue() : null;
  }

  @Override
  public V replace(final {{ k }} key, final @NonNull V value) {
    requireNonNull(value, "value");
    final ExpungingValue<V> entry = this.read.get(key);
    final V previous = entry != null ? entry.get() : null;
    if((entry != null && entry.trySet(value)) || !this.readAmended) return previous;
    return this.putDirty(key, value, true);
  }

  @Override
  public boolean replace(final {{ k }} key, final @NonNull V oldValue, final @NonNull V newValue) {
    requireNonNull(oldValue, "oldValue");
    requireNonNull(newValue, "newValue");
    ExpungingValue<V> entry = this.read.get(key);
    if(entry == null && this.readAmended) {
      synchronized(this.lock) {
        if((entry = this.read.get(key)) == null && this.readAmended && this.dirty != null) {
          if((entry = this.dirty.get(key)) != null && !entry.replace(oldValue, newValue)) {
            entry = null;
          }
          // The slow path should be avoided, even if the value does
          // not match or is present. So we mark a miss, to eventually
          // promote and take a faster path.
          this.missLocked();
          return entry != null;
        }
      }
    }
    return entry != null && entry.replace(oldValue, newValue);
  }

  @Override
  public void clear() {
    synchronized(this.lock) {
      this.read = this.function.apply(this.read.size());
      this.readAmended = false;
      this.dirty = null;
      this.readMisses = 0;
    }
  }

  @Override
  public @NonNull ObjectSet<Entry<V>> {{ k }}2ObjectEntrySet() {
    if(this.entrySet != null) return this.entrySet;
    return this.entrySet = new EntrySet();
  }

  private void promoteIfNeeded() {
    if(this.readAmended) {
      synchronized(this.lock) {
        if(this.readAmended) {
          this.promoteLocked();
        }
      }
    }
  }

  private void promoteLocked() {
    if(this.dirty != null) {
      this.read = this.dirty;
    }
    this.readAmended = false;
    this.dirty = null;
    this.readMisses = 0;
  }

  private void missLocked() {
    if(++this.readMisses > (this.dirty != null ? this.dirty.size() : 0)) {
      this.promoteLocked();
    }
  }

  private void dirtyLocked() {
    if(this.dirty != null) return;
    this.dirty = this.function.apply(this.read.size());
    {{ K }}2ObjectMaps.fastForEach(this.read, (entry) -> {
      if(!entry.getValue().tryMarkExpunged()) {
        this.dirty.put(entry.get{{ K }}Key(), entry.getValue());
      }
    });
  }

  @SuppressWarnings({"unchecked", "rawtypes"})
  private final static class ExpungingValueImpl<V> implements {{ K }}2ObjectSyncMap.ExpungingValue<V> {
    private static final AtomicReferenceFieldUpdater<ExpungingValueImpl, Object> VALUE_UPDATER = AtomicReferenceFieldUpdater
      .newUpdater(ExpungingValueImpl.class, Object.class, "value");
    private static final Object EXPUNGED = new Object();
    private volatile Object value;

    private ExpungingValueImpl(final @NonNull V value) {
      this.value = value;
    }

    @Override
    public @Nullable V get() {
      final Object value = ExpungingValueImpl.VALUE_UPDATER.get(this);
      return value == ExpungingValueImpl.EXPUNGED ? null : (V) value;
    }

    @Override
    public Map.@NonNull Entry<Boolean, V> putIfAbsent(final @NonNull V value) {
      for(; ; ) {
        final Object previous = ExpungingValueImpl.VALUE_UPDATER.get(this);
        if(previous == ExpungingValueImpl.EXPUNGED) {
          return new AbstractMap.SimpleImmutableEntry<>(Boolean.FALSE, null);
        }
        if(previous != null) {
          return new AbstractMap.SimpleImmutableEntry<>(Boolean.TRUE, (V) previous);
        }
        if(ExpungingValueImpl.VALUE_UPDATER.compareAndSet(this, null, value)) {
          return new AbstractMap.SimpleImmutableEntry<>(Boolean.TRUE, null);
        }
      }
    }

    @Override
    public boolean expunged() {
      return ExpungingValueImpl.VALUE_UPDATER.get(this) == ExpungingValueImpl.EXPUNGED;
    }

    @Override
    public boolean exists() {
      final Object value = ExpungingValueImpl.VALUE_UPDATER.get(this);
      return value != null && value != ExpungingValueImpl.EXPUNGED;
    }

    @Override
    public void set(final @NonNull V value) {
      ExpungingValueImpl.VALUE_UPDATER.set(this, value);
    }

    @Override
    public boolean replace(final @NonNull Object compare, final @Nullable V newValue) {
      for(; ; ) {
        final Object value = ExpungingValueImpl.VALUE_UPDATER.get(this);
        if(value == ExpungingValueImpl.EXPUNGED || !Objects.equals(value, compare)) return false;
        if(ExpungingValueImpl.VALUE_UPDATER.compareAndSet(this, value, newValue)) return true;
      }
    }

    @Override
    public @Nullable V clear() {
      for(; ; ) {
        final Object value = ExpungingValueImpl.VALUE_UPDATER.get(this);
        if(value == null || value == ExpungingValueImpl.EXPUNGED) return null;
        if(ExpungingValueImpl.VALUE_UPDATER.compareAndSet(this, value, null)) return (V) value;
      }
    }

    @Override
    public boolean trySet(final @NonNull V value) {
      for(; ; ) {
        final Object present = ExpungingValueImpl.VALUE_UPDATER.get(this);
        if(present == ExpungingValueImpl.EXPUNGED) return false;
        if(ExpungingValueImpl.VALUE_UPDATER.compareAndSet(this, present, value)) return true;
      }
    }

    @Override
    public boolean tryMarkExpunged() {
      Object value = ExpungingValueImpl.VALUE_UPDATER.get(this);
      while(value == null) {
        if(ExpungingValueImpl.VALUE_UPDATER.compareAndSet(this, null, ExpungingValueImpl.EXPUNGED)) return true;
        value = ExpungingValueImpl.VALUE_UPDATER.get(this);
      }
      return false;
    }

    @Override
    public boolean tryUnexpungeAndSet(final @Nullable V value) {
      return ExpungingValueImpl.VALUE_UPDATER.compareAndSet(this, ExpungingValueImpl.EXPUNGED, value);
    }

    @Override
    public String toString() {
      return "{{ K }}2ObjectSyncMapImpl.ExpungingValue{value=" + this.get() + "}";
    }
  }

  private final class MapEntry implements {{ K }}2ObjectMap.Entry<V> {
    private final {{ k }} key;

    private MapEntry(final {{ K }}2ObjectMap.@NonNull Entry<ExpungingValue<V>> entry) {
      this.key = entry.get{{ K }}Key();
    }

    @Override
    public {{ k }} get{{ K }}Key() {
      return this.key;
    }

    @Override
    public @Nullable V getValue() {
      return {{ K }}2ObjectSyncMapImpl.this.get(this.key);
    }

    @Override
    public @Nullable V setValue(final @NonNull V value) {
      return {{ K }}2ObjectSyncMapImpl.this.put(this.key, value);
    }

    @Override
    public @NonNull String toString() {
      return "{{ K }}2ObjectSyncMapImpl.MapEntry{key=" + this.get{{ K }}Key() + ", value=" + this.getValue() + "}";
    }

    @Override
    public boolean equals(final @Nullable Object other) {
      if(this == other) return true;
      if(!(other instanceof {{ K }}2ObjectMap.Entry)) return false;
      final {{ K }}2ObjectMap.Entry<?> that = ({{ K }}2ObjectMap.Entry<?>) other;
      return Objects.equals(this.get{{ K }}Key(), that.get{{ K }}Key())
        && Objects.equals(this.getValue(), that.getValue());
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.get{{ K }}Key(), this.getValue());
    }
  }

  private final class EntrySet extends AbstractObjectSet<{{ K }}2ObjectMap.Entry<V>> {
    @Override
    public int size() {
      return {{ K }}2ObjectSyncMapImpl.this.size();
    }

    @Override
    public boolean contains(final @Nullable Object entry) {
      if(!(entry instanceof {{ K }}2ObjectMap.Entry)) return false;
      final {{ K }}2ObjectMap.Entry<?> mapEntry = ({{ K }}2ObjectMap.Entry<?>) entry;
      final V value = {{ K }}2ObjectSyncMapImpl.this.get(mapEntry.get{{ K }}Key());
      return value != null && Objects.equals(value, mapEntry.getValue());
    }

    @Override
    public boolean remove(final @Nullable Object entry) {
      if(!(entry instanceof {{ K }}2ObjectMap.Entry)) return false;
      final {{ K }}2ObjectMap.Entry<?> mapEntry = ({{ K }}2ObjectMap.Entry<?>) entry;
      return {{ K }}2ObjectSyncMapImpl.this.remove(mapEntry.get{{ K }}Key()) != null;
    }

    @Override
    public void clear() {
      {{ K }}2ObjectSyncMapImpl.this.clear();
    }

    @Override
    public @NonNull ObjectIterator<{{ K }}2ObjectMap.Entry<V>> iterator() {
      {{ K }}2ObjectSyncMapImpl.this.promoteIfNeeded();
      return new EntryIterator({{ K }}2ObjectSyncMapImpl.this.read.{{ k }}2ObjectEntrySet().iterator());
    }
  }

  private final class EntryIterator implements ObjectIterator<{{ K }}2ObjectMap.Entry<V>> {
    private final Iterator<{{ K }}2ObjectMap.Entry<ExpungingValue<V>>> backingIterator;
    private {{ K }}2ObjectMap.Entry<V> next;
    private {{ K }}2ObjectMap.Entry<V> current;

    private EntryIterator(final @NonNull Iterator<{{ K }}2ObjectMap.Entry<ExpungingValue<V>>> backingIterator) {
      this.backingIterator = backingIterator;
      final {{ K }}2ObjectMap.Entry<ExpungingValue<V>> entry = this.getNextValue();
      this.next = (entry != null ? new MapEntry(entry) : null);
    }

    private {{ K }}2ObjectMap.Entry<ExpungingValue<V>> getNextValue() {
      {{ K }}2ObjectMap.Entry<ExpungingValue<V>> entry = null;
      while(this.backingIterator.hasNext() && entry == null) {
        final ExpungingValue<V> value = (entry = this.backingIterator.next()).getValue();
        if(!value.exists()) {
          entry = null;
        }
      }
      return entry;
    }

    @Override
    public boolean hasNext() {
      return this.next != null;
    }

    @Override
    public {{ K }}2ObjectMap.@NonNull Entry<V> next() {
      this.current = this.next;
      final {{ K }}2ObjectMap.Entry<ExpungingValue<V>> entry = this.getNextValue();
      this.next = (entry != null ? new MapEntry(entry) : null);
      if(this.current == null) throw new NoSuchElementException();
      return this.current;
    }

    @Override
    public void remove() {
      if(this.current == null) return;
      {{ K }}2ObjectSyncMapImpl.this.remove(this.current.get{{ K }}Key());
    }

    @Override
    public void forEachRemaining(final @NonNull Consumer<? super {{ K }}2ObjectMap.Entry<V>> action) {
      if(this.next != null) action.accept(this.next);
      this.backingIterator.forEachRemaining(entry -> {
        if(entry.getValue().exists()) {
          action.accept(new MapEntry(entry));
        }
      });
    }
  }
}
